# -*- coding: utf-8 -*-
"""draw_histo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q77mSbTuzvBewvich37StIf0o3A4V4HP
"""

import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

plt.rcParams.update({'font.size': 28})

def plot_box(bpe_filepath, sage_filepath, top_tokens_size):
    with open(bpe_filepath) as bpe_file:
        bpe_histo = [round(float(l), 2) for l in bpe_file]
    
    with open(sage_filepath) as sage_file:
        sage_histo = [round(float(l), 2) for l in sage_file]

    if not top_tokens_size:
        top_tokens_size = min(len(bpe_histo), len(sage_histo))
    
    figure(figsize=(12, 10), dpi=80)
    datas = [bpe_histo, sage_histo]
    colors = ["darkorange", "darkgreen"]
    medianprops = dict(linewidth=2.5, color='yellow')
    meanpointprops = dict(markeredgecolor='white',
                      markerfacecolor='white')
    bplot = plt.boxplot(datas, sym="", labels=["BPE", "SaGe"], \
                        positions=[1, 2], \
                        widths=[0.3, 0.3], \
                        patch_artist=True, \
                        showmeans=True, \
                        meanprops=meanpointprops,\
                        medianprops=medianprops)
    for patch, color in zip(bplot['boxes'], colors):
        patch.set_facecolor(color)
    
    plt.xlim(0, 3)
    plt.show()

def plot_hist(bpe_filepath, sage_filepath, top_tokens_size):
    with open(bpe_filepath) as bpe_file:
        bpe_histo = [round(float(l), 2) for l in bpe_file]
    
    with open(sage_filepath) as sage_file:
        sage_histo = [round(float(l), 2) for l in sage_file]
    
    if not top_tokens_size:
        top_tokens_size = min(len(bpe_histo), len(sage_histo))

    figure(figsize=(18, 10), dpi=80)
    plt.bar(range(top_tokens_size), bpe_histo[:top_tokens_size], label="BPE", alpha=0.5, color="orange")
    plt.bar(range(top_tokens_size), sage_histo[:top_tokens_size], label="SaGe", alpha=0.5, color="darkgreen")
    plt.xlabel("Rank")
    plt.yticks([2000, 4000, 6000, 8000, 10000, 12000, 14000, 16000], ["2K", "4K", "6K", "8K", "10K", "12K", "14K", "16K"])
    plt.legend()

    plt.show()

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Tokenization/16K-Analysis/neighbors\ histogram

plot_hist('domain_transfer_bpe_freqs_w5.txt', 'domain_transfer_sage_freqs_w5.txt', 200)

plot_box('domain_transfer_bpe_normalized_freqs_w5.txt', 'domain_transfer_sage_normalized_freqs_w5.txt', 0)

plot_hist('tr_domain_transfer_bpe_freqs_w5.txt', 'tr_domain_transfer_sage_freqs_w5.txt', 200)

plot_hist('en_bpe_vanilla_normalized_freqs_w5.txt', 'en_sage_normalized_freqs_w5.txt', 0)

plot_hist('tr_bpe_vanilla_w5-freqs.txt', 'tr_sg_bpe_w5-freqs.txt', 200)

plot_hist('en_bpe_vanilla_normalized_freqs_w5.txt', 'en_sage_normalized_freqs_w5.txt', 200)

plot_hist('en_bpe_vanilla_normalized_freqs_w5.txt', 'en_sage_normalized_freqs_w5.txt', 0)

plot_hist('tr_bpe_vanilla_normalized_freqs_w5.txt', 'tr_sage_normalized_freqs_w5.txt', 200)

plot_hist('tr_bpe_vanilla_normalized_freqs_w5.txt', 'tr_sage_normalized_freqs_w5.txt', 0)

plot_hist('tr_bpe_vanilla_w5-freqs.txt', 'tr_sg_bpe_w5-freqs.txt', 0, "turkish w5 all")

plot_hist('tr_bpe_vanilla_w2-freqs.txt', 'tr_sg_bpe_w2-freqs.txt', 200, "turkish w2")

plot_hist('tr_bpe_vanilla_w2-freqs.txt', 'tr_sg_bpe_w2-freqs.txt', 0, "turkish w2 all")

plot_hist('en_bpe_vanilla_freqs_w5.txt', 'en_sage_freqs_w5.txt', 200, "english w5")

plot_hist('en_bpe_vanilla_freqs_w5.txt', 'en_sage_freqs_w5.txt', 0, "english w5 all")

plot_hist('en_bpe_vanilla_freqs_w2.txt', 'en_sage_freqs_w2.txt', 200, "english w2")

plot_hist('en_bpe_vanilla_freqs_w2.txt', 'en_sage_freqs_w2.txt', 0, "english w2 all")

plot_hist('en_bpe_vanilla_normalized_freqs_w5.txt', 'en_sage_normalized_freqs_w5.txt', 0, "english w5")

'''with open('bpe_vanilla_w5-freqs.txt') as infl:
  bpe_histo_w5 = [int(l) for l in infl]'''

'''bpe_histo_w5[:10]'''

'''with open('sg_bpe_w5-freqs.txt') as infl:
  sg_histo_w5 = [int(l) for l in infl]'''

'''sg_histo_w5[:10]'''

'''bpe_histo_w5 += [0] * (16000-len(bpe_histo_w5))
sg_histo_w5 += [0] * (16000-len(sg_histo_w5))'''

'''len(bpe_histo_w5), len(sg_histo_w5)'''

'''figure(figsize=(18, 10), dpi=80)
SIZE = 200
plt.bar(range(SIZE), bpe_histo_w5[:SIZE], label="BPE")
plt.bar(range(SIZE), sg_histo_w5[:SIZE], label="SaGe")

plt.legend()
plt.show()'''

